import os
import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
import csv
import tkinter as tk
from tkinter import Label, Button
from PIL import Image, ImageTk
import re

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
IMAGE_FOLDER = "Questionair Images"
IMG_SIZE = (224, 224)
model = load_model("food_comparison_model_v8.h5")
CSV_FILE = "test.csv"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
def extract_number(filename):
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
    numbers = re.findall(r'\d+', filename)
    return int(numbers[0]) if numbers else float('inf')

# ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û
image_files = sorted(
    [f for f in os.listdir(IMAGE_FOLDER) if f.endswith(('.jpg', '.png'))],
    key=extract_number
)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û
def load_and_preprocess_image(image_name):
    img_path = os.path.join(IMAGE_FOLDER, image_name)
    img = cv2.imread(img_path)
    if img is None:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {img_path}")
        return None
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = cv2.resize(img, IMG_SIZE)
    img = img / 255.0
    return img

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
def predict_winner(image1, image2):
    img1 = load_and_preprocess_image(image1)
    img2 = load_and_preprocess_image(image2)
    
    if img1 is None or img2 is None:
        return None, None, None

    pred1 = model.predict(np.expand_dims(img1, axis=0))[0][0]
    pred2 = model.predict(np.expand_dims(img2, axis=0))[0][0]
    winner = 1 if pred1 > pred2 else 2

    return winner, pred1, pred2, img1, img2

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏á CSV (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞)
def save_result_to_csv(image1, image2, winner):
    with open(CSV_FILE, mode="a", newline="") as file:
        writer = csv.writer(file)
        writer.writerow([image1, image2, winner])

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏á CSV
def process_images_and_save_results():
    for i in range(0, len(image_files) - 1, 2):
        image1 = image_files[i]
        image2 = image_files[i + 1]
        winner, _, _, _, _ = predict_winner(image1, image2)

        if winner is not None:
            save_result_to_csv(image1, image2, winner)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏á CSV

# üìå **‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á GUI**
process_images_and_save_results()

# üìå **‡πÄ‡∏£‡∏¥‡πà‡∏° GUI ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß**
def update_images():
    global current_index
    if current_index >= len(image_files) - 1:
        return

    image1_name = image_files[current_index]
    image2_name = image_files[current_index + 1]

    winner, score1, score2, img1, img2 = predict_winner(image1_name, image2_name)

    if img1 is None or img2 is None:
        return

    img1_tk = ImageTk.PhotoImage(Image.fromarray((img1 * 255).astype(np.uint8)))
    img2_tk = ImageTk.PhotoImage(Image.fromarray((img2 * 255).astype(np.uint8)))

    label_img1.config(image=img1_tk)
    label_img1.image = img1_tk
    label_img2.config(image=img2_tk)
    label_img2.image = img2_tk
    label_image1_name.config(text=f"Image 1: {image1_name}")
    label_image2_name.config(text=f"Image 2: {image2_name}")
    label_winner.config(text=f"üèÜ The Best Picture is: {winner}")

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    label_score1.config(text=f"Score: {score1:.4f}")
    label_score2.config(text=f"Score: {score2:.4f}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏û
def next_image():
    global current_index
    if current_index < len(image_files) - 2:
        current_index += 2
        update_images()

def prev_image():
    global current_index
    if current_index > 0:
        current_index -= 2
        update_images()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á GUI
def __main__():
    global label_img1, label_img2, label_image1_name, label_image2_name, label_winner, label_score1, label_score2, current_index
    current_index = 0

    root = tk.Tk()
    root.title("Food Image Comparison")
    root.geometry("900x600")

    root.columnconfigure(0, weight=1)
    root.columnconfigure(1, weight=1)
    root.rowconfigure(0, weight=4)
    root.rowconfigure(1, weight=1)
    root.rowconfigure(2, weight=1)
    root.rowconfigure(3, weight=1)
    root.rowconfigure(4, weight=1)

    label_img1 = Label(root)
    label_img1.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

    label_img2 = Label(root)
    label_img2.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")

    label_image1_name = Label(root, text="Image 1: ", font=("Arial", 10))
    label_image1_name.grid(row=4, column=0, pady=10, sticky="nsew")

    label_image2_name = Label(root, text="Image 2: ", font=("Arial", 10))
    label_image2_name.grid(row=4, column=1, pady=10, sticky="nsew")

    label_score1 = Label(root, text="Score: ", font=("Arial", 12))
    label_score1.grid(row=1, column=0, sticky="nsew")

    label_score2 = Label(root, text="Score: ", font=("Arial", 12))
    label_score2.grid(row=1, column=1, sticky="nsew")

    label_winner = Label(root, text="The Best Picture is: ", font=("Arial", 14, "bold"), fg="red")
    label_winner.grid(row=2, column=0, columnspan=2, pady=10, sticky="nsew")

    button_prev = Button(root, text="‚¨Ö Previous", font=("Arial", 12), command=prev_image)
    button_prev.grid(row=3, column=0, pady=10, sticky="nsew")

    button_next = Button(root, text="Next ‚û°", font=("Arial", 12), command=next_image)
    button_next.grid(row=3, column=1, pady=10, sticky="nsew")

    update_images()
    root.mainloop()

if __name__ == "__main__":
    __main__()