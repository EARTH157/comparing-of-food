import pandas as pd
import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import layers, models

X = []
y = []

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ
IMAGE_FOLDER = "Questionair Images"

# ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV
file_path = "data_from_questionaire.csv"
try:
    df = pd.read_csv(file_path)
except FileNotFoundError:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå CSV: {file_path}")
    exit(1)

IMG_SIZE = (224, 224)  # ‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•

def load_and_preprocess_image(image_name):
    """ ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå, Resize ‡πÅ‡∏•‡∏∞ Normalize """
    img_path = os.path.join(IMAGE_FOLDER, image_name)
    img = cv2.imread(img_path)
    if img is None:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {img_path}")
        return None
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô RGB
    img = cv2.resize(img, IMG_SIZE)  # Resize ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    img = img / 255.0  # Normalize ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á [0,1]
    return img

for _, row in df.iterrows():
    img1 = load_and_preprocess_image(row["Image 1"])
    img2 = load_and_preprocess_image(row["Image 2"])
    
    if img1 is None or img2 is None:
        continue  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ

    X.append(img1)
    X.append(img2)

    # Winner = 1 ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á Image 1 ‡∏ä‡∏ô‡∏∞, Winner = 2 ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á Image 2 ‡∏ä‡∏ô‡∏∞
    if row["Winner"] == 1:
        y.append(0)  # Image 1 ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
        y.append(1)  # Image 2 ‡πÅ‡∏¢‡πà‡∏Å‡∏ß‡πà‡∏≤
    else:
        y.append(1)  # Image 1 ‡πÅ‡∏¢‡πà‡∏Å‡∏ß‡πà‡∏≤
        y.append(0)  # Image 2 ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤

X = np.array(X)
y = np.array(y)

print(f"üìå ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á X: {X.shape}")
print(f"üìå ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á y: {y.shape}")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• CNN
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation="relu", input_shape=(224, 224, 3)),
    layers.MaxPooling2D(2, 2),

    layers.Conv2D(64, (3, 3), activation="relu"),
    layers.MaxPooling2D(2, 2),

    layers.Conv2D(128, (3, 3), activation="relu"),
    layers.MaxPooling2D(2, 2),

    layers.Flatten(),
    layers.Dense(128, activation="relu"),
    layers.Dropout(0.3),
    layers.Dense(1, activation="sigmoid")  # Output ‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏£‡∏∑‡∏≠ 1
])

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
print(df.info(), df.head())

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
sample_image = load_and_preprocess_image(df.iloc[1]["Image 2"])

model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])

# ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
model.fit(X, y, epochs=15, batch_size=32, validation_split=0.2)
model.save("food_comparison_model_v8.h5")
print("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

plt.imshow(sample_image)
plt.axis("off")
plt.show()